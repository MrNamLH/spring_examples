# ===============================
# THYMELEAF
# ===============================
spring.thymeleaf.cache=false

# ===============================
# SPRING_SECURITY
# ===============================
spring.security.user.name=amdin
spring.security.user.password=admin

# ===============================
# DATASOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "mycontact"
#spring.datasource.url=jdbc:mysql://localhost:3306/mycontact?allowPublicKeyRetrieval=true&useSSL=false
spring.datasource.url = jdbc:mysql://localhost:3306/namlee_blog?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&allowPublicKeyRetrieval=true&useSSL=false
spring.datasource.username=root
spring.datasource.password=root

# Sql Server + Mssql-Jdbc
#spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
#spring.datasource.url=jdbc:sqlserver://comedown-pc\\SQLEXPRESS:1433;databaseName=namlee_blog
#spring.datasource.username=sa
#spring.datasource.password=12345

# Sql Server + JTDS
#spring.datasource.driver-class-name=net.sourceforge.jtds.jdbc.Driver
#spring.datasource.url=jdbc:jtds:sqlserver://comedown-pc:1433/namlee_blog;instance=SQLEXPRESS
#spring.datasource.username=sa
#spring.datasource.password=12345

# Oracle
#spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
#spring.datasource.url=jdbc:oracle:thin:@localhost:1521:db12c
#spring.datasource.username=root
#spring.datasource.password=root123

# PostgreSQL
#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.datasource.url=jdbc:postgresql://comedown-pc:5432/namlee_blog
#spring.datasource.username=postgres
#spring.datasource.password=12345

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.dbcp.test-while-idle=true
spring.datasource.dbcp.validation-query=SELECT 1

# ===============================
# JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql=true

# Hibernate ddl auto (create, create-drop, validate, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto=create-drop

# Naming strategy
#spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.SQLServer2012Dialect
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.Oracle10gDialect

#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# Fix Postgres JPA Error:
# Method org.postgresql.jdbc.PgConnection.createClob() is not yet implemented.
#spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults= false